/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ChainleaderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAccount"
      | "addAccountByOwner"
      | "createSkewedMerkleRootOfChangeAccount"
      | "deleteAccount"
      | "epoch"
      | "getIPFSUrl"
      | "ipnsUrls"
      | "lastAccountUpdate"
      | "lastSkewedMerkleRoot"
      | "owner"
      | "renounceOwnership"
      | "setBaseUrl"
      | "socialFi"
      | "transferOwnership"
      | "users"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeAccount"
      | "OwnershipTransferred"
      | "SendToGeneralManager"
  ): EventFragment;

  encodeFunctionData(functionFragment: "addAccount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addAccountByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSkewedMerkleRootOfChangeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIPFSUrl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ipnsUrls",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastAccountUpdate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSkewedMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setBaseUrl", values: [string]): string;
  encodeFunctionData(functionFragment: "socialFi", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "addAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAccountByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSkewedMerkleRootOfChangeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getIPFSUrl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ipnsUrls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastAccountUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSkewedMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseUrl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "socialFi", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
}

export namespace ChangeAccountEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    merkleRootOfEpoch: BytesLike,
    changedAccount: BytesLike
  ];
  export type OutputTuple = [
    epoch: bigint,
    merkleRootOfEpoch: string,
    changedAccount: string
  ];
  export interface OutputObject {
    epoch: bigint;
    merkleRootOfEpoch: string;
    changedAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendToGeneralManagerEvent {
  export type InputTuple = [epoch: BigNumberish, skewedMerkleRoot: BytesLike];
  export type OutputTuple = [epoch: bigint, skewedMerkleRoot: string];
  export interface OutputObject {
    epoch: bigint;
    skewedMerkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Chainleader extends BaseContract {
  connect(runner?: ContractRunner | null): Chainleader;
  waitForDeployment(): Promise<this>;

  interface: ChainleaderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAccount: TypedContractMethod<[ipnsUrl: string], [void], "nonpayable">;

  addAccountByOwner: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  createSkewedMerkleRootOfChangeAccount: TypedContractMethod<
    [],
    [string],
    "nonpayable"
  >;

  deleteAccount: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  epoch: TypedContractMethod<[], [bigint], "view">;

  getIPFSUrl: TypedContractMethod<[account: AddressLike], [string], "view">;

  ipnsUrls: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  lastAccountUpdate: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        buyPrice: bigint;
        sellPrice: bigint;
        sharesSupply: bigint;
      }
    ],
    "view"
  >;

  lastSkewedMerkleRoot: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBaseUrl: TypedContractMethod<[baseUrl: string], [void], "nonpayable">;

  socialFi: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  users: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAccount"
  ): TypedContractMethod<[ipnsUrl: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAccountByOwner"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createSkewedMerkleRootOfChangeAccount"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteAccount"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "epoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIPFSUrl"
  ): TypedContractMethod<[account: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "ipnsUrls"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "lastAccountUpdate"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        buyPrice: bigint;
        sellPrice: bigint;
        sharesSupply: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastSkewedMerkleRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBaseUrl"
  ): TypedContractMethod<[baseUrl: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "socialFi"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "ChangeAccount"
  ): TypedContractEvent<
    ChangeAccountEvent.InputTuple,
    ChangeAccountEvent.OutputTuple,
    ChangeAccountEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SendToGeneralManager"
  ): TypedContractEvent<
    SendToGeneralManagerEvent.InputTuple,
    SendToGeneralManagerEvent.OutputTuple,
    SendToGeneralManagerEvent.OutputObject
  >;

  filters: {
    "ChangeAccount(uint256,bytes32,bytes)": TypedContractEvent<
      ChangeAccountEvent.InputTuple,
      ChangeAccountEvent.OutputTuple,
      ChangeAccountEvent.OutputObject
    >;
    ChangeAccount: TypedContractEvent<
      ChangeAccountEvent.InputTuple,
      ChangeAccountEvent.OutputTuple,
      ChangeAccountEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SendToGeneralManager(uint256,bytes32)": TypedContractEvent<
      SendToGeneralManagerEvent.InputTuple,
      SendToGeneralManagerEvent.OutputTuple,
      SendToGeneralManagerEvent.OutputObject
    >;
    SendToGeneralManager: TypedContractEvent<
      SendToGeneralManagerEvent.InputTuple,
      SendToGeneralManagerEvent.OutputTuple,
      SendToGeneralManagerEvent.OutputObject
    >;
  };
}
